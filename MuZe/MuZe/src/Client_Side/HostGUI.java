/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client_Side;

import static Client_Side.TestMuZe.RTSPBufferedReader;
import static Client_Side.TestMuZe.sp;
import static Client_Side.TestMuZe.state;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Mason
 */
public class HostGUI extends javax.swing.JFrame {

    
      //Thread that will take care of updating playlist
    static ChatManager chatmanager;

    //RTP variables:
    //----------------
    DatagramPacket rcvdp;               //UDP packet received from the server
    static DatagramSocket RTPsocket;    //socket to be used to send and receive UDP packets
    static int RTP_RCV_PORT = 5544;     //port where the client will receive the RTP packets
    
    //RTSP variables
    //----------------
    //rtsp states 
    final static int INIT = 0;
    final static int READY = 1;
    final static int PLAYING = 2;
    final static int PAUSED = 3;
    static int state;                   //RTSP state == INIT or READY or PLAYING
    //private Socket RTSPsocket;                  //socket used to send/receive RTSP messages
    //input and output stream filters
    static BufferedReader RTSPBufferedReader;
    static BufferedWriter RTSPBufferedWriter;
  
    static String SongFileName;         //song file to request to the server
    static int RTSPSeqNb = 0;           //Sequence number of RTSP messages within the session
    static int RTSPid = 0;              //ID of the RTSP session (given by the RTSP Server)

  
    private static final String DIRECTORY_ARCHIVE_TEMPORARY = "./temp/";
    private static final String ARCHIVE_MP3_TEMPORARY = "music.mp3";
    final static String CRLF = "\r\n";
    
    static StreamProcessorHost sp;          //thread that will run and receive the RTP stream
    
    private static FileOutputStream fileoutput;

    //Audio constants:
    //------------------
    static int MJPEG_TYPE = 14; //RTP payload type for MP3  audio
    /**
     * Creates new form HostGUI
     */
    public HostGUI() {
        initComponents();
        lb_ArtistName.setText(" ");
        lb_SongName.setText(" ");
        lb_AlbumName.setText(" ");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btn_Pause = new javax.swing.JButton();
        btn_Play = new javax.swing.JButton();
        btn_Download = new javax.swing.JButton();
        btn_Skip = new javax.swing.JButton();
        btn_upload = new javax.swing.JButton();
        tb_chatInput = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txta_ChatWindow = new javax.swing.JTextArea();
        btn_upload1 = new javax.swing.JButton();
        lb_Artist = new javax.swing.JLabel();
        lb_ArtistName = new javax.swing.JLabel();
        lb_SongName = new javax.swing.JLabel();
        lb_Song = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lb_Album = new javax.swing.JLabel();
        lb_AlbumName = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txt_PlayListArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MuZe Streaming");
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(java.awt.Color.white);
        setName("frm_MuZe"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosed(java.awt.event.WindowEvent evt)
            {
                formWindowClosed(evt);
            }
        });

        btn_Pause.setText("Pause");
        btn_Pause.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_PauseActionPerformed(evt);
            }
        });

        btn_Play.setText("Play");
        btn_Play.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_PlayActionPerformed(evt);
            }
        });

        btn_Download.setText("Download");
        btn_Download.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_DownloadActionPerformed(evt);
            }
        });

        btn_Skip.setText("Skip");
        btn_Skip.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_SkipActionPerformed(evt);
            }
        });

        btn_upload.setText("Upload");
        btn_upload.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_uploadActionPerformed(evt);
            }
        });

        tb_chatInput.setText("Enter Message Here");
        tb_chatInput.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tb_chatInputActionPerformed(evt);
            }
        });

        txta_ChatWindow.setEditable(false);
        txta_ChatWindow.setColumns(20);
        txta_ChatWindow.setRows(5);
        txta_ChatWindow.setFocusable(false);
        jScrollPane1.setViewportView(txta_ChatWindow);

        btn_upload1.setText("Send Message");
        btn_upload1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_upload1ActionPerformed(evt);
            }
        });

        lb_Artist.setText("Artist:");

        lb_ArtistName.setText("jLabel1");

        lb_SongName.setText("jLabel1");

        lb_Song.setText("Song:");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );

        lb_Album.setText("Album:");

        lb_AlbumName.setText("jLabel1");

        txt_PlayListArea.setEditable(false);
        txt_PlayListArea.setColumns(20);
        txt_PlayListArea.setRows(5);
        jScrollPane3.setViewportView(txt_PlayListArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(tb_chatInput)
                    .addComponent(btn_upload1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_Play, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_Pause, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_Skip, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lb_Artist)
                                    .addComponent(lb_Song)
                                    .addComponent(lb_Album))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lb_ArtistName, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lb_AlbumName)
                                            .addComponent(lb_SongName))
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btn_Download, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_upload, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(91, 91, 91))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lb_Artist)
                                    .addComponent(lb_ArtistName))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lb_Song)
                                    .addComponent(lb_SongName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lb_Album)
                                    .addComponent(lb_AlbumName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)))
                        .addGap(88, 88, 88)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tb_chatInput, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btn_upload1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Play, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Pause, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Skip, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Download, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_upload, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_PauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PauseActionPerformed
        if (state == PLAYING)
        {
            try {
                sp.pause();
            } catch (InterruptedException ex) {
                Logger.getLogger(TestMuZe.class.getName()).log(Level.SEVERE, null, ex);
            }
            state = PAUSED;
        }
    }//GEN-LAST:event_btn_PauseActionPerformed

    private void btn_PlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PlayActionPerformed
        if (state == PAUSED)
        {
            try {
                sp.pause();
            } catch (InterruptedException ex) {
                Logger.getLogger(TestMuZe.class.getName()).log(Level.SEVERE, null, ex);
            }
            state = PLAYING;
        }
    }//GEN-LAST:event_btn_PlayActionPerformed

    private void btn_DownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DownloadActionPerformed
       FTPDownload ftp = new FTPDownload();
       ftp.dlGui.show();
    }//GEN-LAST:event_btn_DownloadActionPerformed

    private void btn_SkipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SkipActionPerformed
        sp.kill();
        RTSPSeqNb++;
        send_RTSP_request("STOP");
        
      
    }//GEN-LAST:event_btn_SkipActionPerformed

    private void btn_uploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_uploadActionPerformed
        // TODO add your handling code here:
        UploadGUI upGui = new UploadGUI();
    }//GEN-LAST:event_btn_uploadActionPerformed

    private void tb_chatInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tb_chatInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tb_chatInputActionPerformed

    private void btn_upload1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_upload1ActionPerformed
        try
        {
            // TODO add your handling code here:
            chatmanager.sendMessage(tb_chatInput.getText());
        } catch (IOException ex)
        {
            Logger.getLogger(HostGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_upload1ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        send_RTSP_request("TEARDOWN");
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HostGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HostGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HostGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HostGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HostGUI().setVisible(true);
            }
        });
        try{
        //TO DO: fill this with the directory returned by FTP client, for now, we'll hardcode in an playlist
            ArrayList<String> playlist = new ArrayList();
            playlist.add("test.mp3");
            playlist.add("testing.mp3");
            playlist.add("test.mp3");
            
            
            //get server RTSP port and IP address
            //TO DO: get this from a login screen
            int RTSP_server_port = 5544;
            
            String serverHost = (String)JOptionPane.showInputDialog(
                    null,
                    "Enter the server ip:",
                    "ServerIP",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    "127.0.0.1");
            //String ServerHost = "localhost";
            InetAddress ServerIPAddr = InetAddress.getByName(serverHost);
            
            String username = (String)JOptionPane.showInputDialog(
                    null,
                    "Enter the your username:",
                    "UserName",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    "username");
            
            
            SongFileName = playlist.get(0);         //get the very first song from the playlist to request
            
            Socket RTSPsocket = new Socket(ServerIPAddr, RTSP_server_port);
            RTSPBufferedReader = new BufferedReader(new InputStreamReader(RTSPsocket.getInputStream()) );
            RTSPBufferedWriter = new BufferedWriter(new OutputStreamWriter(RTSPsocket.getOutputStream()) );
            
            chatmanager = new ChatManager(txta_ChatWindow, lb_ArtistName, lb_SongName, lb_AlbumName, username);
            chatmanager.start();
            //init RTSP state:
            state = INIT;
            
            File tempdirectory = new File(DIRECTORY_ARCHIVE_TEMPORARY);
            
            if (!tempdirectory.exists())
            {
                tempdirectory.mkdir();
                tempdirectory = null;
            }
            //fileoutput = new FileOutputStream(DIRECTORY_ARCHIVE_TEMPORARY  + ARCHIVE_MP3_TEMPORARY);
            
            //send setup to the server
            RTPsocket = new DatagramSocket(RTP_RCV_PORT);
            
            //set TimeOut value of the socket to 5msec.
            RTPsocket.setSoTimeout(5);
            
            RTSPSeqNb = 1;
            
            
            //Send SETUP message to the server
            send_RTSP_request("SETUP");
            
            if (parse_server_response() != 200)
            {
                System.out.println("Invalid Server Response");
                
            }
            else
            {
                //change RTSP state and print new state
                state = READY;
            }
           /* 
            FTPUtil ftp = new FTPUtil("75.185.162.157", 21, "user", "password");
            ftp.connect();
            
            String [] filenames = ftp.getFileList();
            for(int i = 0; i< filenames.length; i ++)
            {
                txt_PlayListArea.append(filenames[i]);
            }*/
            int i = 0;
            while (true)
            {
                
                if (state == READY) 
                {
          
                    //increase RTSP sequence number
                    RTSPSeqNb = RTSPSeqNb++;
              
              
                    //Send PLAY message to the server
                    send_RTSP_request("PLAY");
              
                    //Wait for the response
                    if (parse_server_response() != 200)
                        System.out.println("Invalid Server Response");
                    else
                    {
                        
                        //change RTSP state and print out new state
                        state=PLAYING;
                  
                        sp = new StreamProcessorHost(RTPsocket);            //creqte new stream processor thread
                        Thread.sleep(200);
                        sp.start();
                        sp.join();                                      //wait for stream to get done playing 
                        System.out.println("Joining back to the main");
                        state = READY;
                 
                    }
                    SongFileName = playlist.get(i % playlist.size());                         //grab the title of the next song in the playlist
                    i++;
                }
                
            }
            
        } catch (Exception ex) {
            Logger.getLogger(TestMuZe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
        
    private static int parse_server_response() throws Exception 
    {
    int reply_code = 0;

    try{
      //parse status line and extract the reply_code:
      String StatusLine = RTSPBufferedReader.readLine();
      //System.out.println("RTSP Client - Received from Server:");
      System.out.println(StatusLine);
    
      StringTokenizer tokens = new StringTokenizer(StatusLine);
      tokens.nextToken(); //skip over the RTSP version
      reply_code = Integer.parseInt(tokens.nextToken());
      
      //if reply code is OK get and print the 2 other lines
      if (reply_code == 200)
        {
          String SeqNumLine = RTSPBufferedReader.readLine();
          System.out.println(SeqNumLine);
          
          String SessionLine = RTSPBufferedReader.readLine();
          System.out.println(SessionLine);
        
          //if state == INIT gets the Session Id from the SessionLine
          tokens = new StringTokenizer(SessionLine);
          tokens.nextToken(); //skip over the Session:
          RTSPid = Integer.parseInt(tokens.nextToken());
        }
      
    }
    catch(Exception ex)
      {
        System.out.println("Exception caught c: "+ex);
        System.exit(0);
      }
    
    return(reply_code);
  }

  /*
    Send RTSP Request
  
    this will send the required RTSP request to the server
  */

  
  
  private static void send_RTSP_request(String request_type)
  {
    try{
      //Use the RTSPBufferedWriter to write to the RTSP socket

      //write the request line:
      RTSPBufferedWriter.write(request_type+" "+SongFileName+" RTSP/1.0"+CRLF);
      System.out.print(request_type+" "+SongFileName+" RTSP/1.0"+CRLF);
      
      //write the CSeq line: 
      RTSPBufferedWriter.write("CSeq "+ RTSPSeqNb +CRLF);
      System.out.print("CSeq "+ RTSPSeqNb +CRLF);
      
      //check if request_type is equal to "SETUP" and in this case write the Transport: line advertising to the server the port used to receive the RTP packets RTP_RCV_PORT
      if(request_type.equals("SETUP"))
      {
          RTSPBufferedWriter.write("Transport: RTP/UDP; client_port= "+ RTP_RCV_PORT + CRLF);
          System.out.print("Transport: RTP/UDP; client_port= "+ RTP_RCV_PORT + CRLF);
      }
      //otherwise, write the Session line from the RTSPid field
      else
      {
          RTSPBufferedWriter.write("Session: "+ RTSPid + CRLF);
          System.out.print("Session: "+ RTSPid + CRLF);
      }
      try
      {
      RTSPBufferedWriter.flush();
      }
      catch(IOException e)
      {
          System.out.println("Exception caught a: "+e.toString());
      }
    }
    catch(Exception ex)
      {
        System.out.println("Exception caught b: "+ex);
        System.exit(0);
      }
  }
  
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Download;
    private javax.swing.JButton btn_Pause;
    private javax.swing.JButton btn_Play;
    private javax.swing.JButton btn_Skip;
    private javax.swing.JButton btn_upload;
    private javax.swing.JButton btn_upload1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lb_Album;
    private static javax.swing.JLabel lb_AlbumName;
    private javax.swing.JLabel lb_Artist;
    private static javax.swing.JLabel lb_ArtistName;
    private javax.swing.JLabel lb_Song;
    private static javax.swing.JLabel lb_SongName;
    private javax.swing.JTextField tb_chatInput;
    private static javax.swing.JTextArea txt_PlayListArea;
    private static javax.swing.JTextArea txta_ChatWindow;
    // End of variables declaration//GEN-END:variables
}
