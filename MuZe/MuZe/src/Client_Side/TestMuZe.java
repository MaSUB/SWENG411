/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client_Side;

import RTSPtest.Mp3Player;
import RTSPtest.RTPpacket;
import java.io.*;
import java.net.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.Line.Info;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.Port;
import javax.swing.*;
import javazoom.jl.decoder.JavaLayerException;
//import org.farng.mp3.MP3File;
//import org.farng.mp3.TagException;
//import org.farng.mp3.id3.ID3v1;


/**
 * This is the host version of the GUI
 * This houses RTSP requesting methods as well as the normal stream processor thread
 * that the regular clients will also have
 * TO DO: add a login screen so that the server IP can be easily changed
 * @author Tyler, Devon
 */
public class TestMuZe extends javax.swing.JFrame {

    //Thread that will take care of updating playlist
    static PlaylistManager pmanager;

    //RTP variables:
    //----------------
    DatagramPacket rcvdp;               //UDP packet received from the server
    static DatagramSocket RTPsocket;    //socket to be used to send and receive UDP packets
    static int RTP_RCV_PORT = 5544;     //port where the client will receive the RTP packets
    
    //RTSP variables
    //----------------
    //rtsp states 
    final static int INIT = 0;
    final static int READY = 1;
    final static int PLAYING = 2;
    final static int PAUSED = 3;
    static int state;                   //RTSP state == INIT or READY or PLAYING
    //private Socket RTSPsocket;                  //socket used to send/receive RTSP messages
    //input and output stream filters
    static BufferedReader RTSPBufferedReader;
    static BufferedWriter RTSPBufferedWriter;
  
    static String SongFileName;         //song file to request to the server
    static int RTSPSeqNb = 0;           //Sequence number of RTSP messages within the session
    static int RTSPid = 0;              //ID of the RTSP session (given by the RTSP Server)

  
    private static final String DIRECTORY_ARCHIVE_TEMPORARY = "./temp/";
    private static final String ARCHIVE_MP3_TEMPORARY = "music.mp3";
    final static String CRLF = "\r\n";
    
    static StreamProcessorHost sp;          //thread that will run and receive the RTP stream
    
    private static FileOutputStream fileoutput;

    //Audio constants:
    //------------------
    static int MJPEG_TYPE = 14; //RTP payload type for MP3  audio
    
    /**
     * Creates new form TestMuZe
     */
    public TestMuZe() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ButtonPanel = new javax.swing.JPanel();
        PlayButton = new javax.swing.JButton();
        PauseButton = new javax.swing.JButton();
        DownloadButton = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        albumlabel = new javax.swing.JLabel();
        skipButton = new javax.swing.JButton();
        SongInfoPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SongInfoArea = new javax.swing.JTextPane();
        PlaylistPanel = new javax.swing.JPanel();
        songlabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        artistlabel = new javax.swing.JLabel();
        artistLabel = new javax.swing.JLabel();
        songLabel = new javax.swing.JLabel();
        albumLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        PlayButton.setText("Play");
        PlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayButtonActionPerformed(evt);
            }
        });

        PauseButton.setText("Pause");
        PauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PauseButtonActionPerformed(evt);
            }
        });

        DownloadButton.setText("Download");
        DownloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownloadButtonActionPerformed(evt);
            }
        });

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        jSlider1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jSlider1CaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        skipButton.setText("Skip");
        skipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skipButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ButtonPanelLayout = new javax.swing.GroupLayout(ButtonPanel);
        ButtonPanel.setLayout(ButtonPanelLayout);
        ButtonPanelLayout.setHorizontalGroup(
            ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPanelLayout.createSequentialGroup()
                .addGroup(ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ButtonPanelLayout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ButtonPanelLayout.createSequentialGroup()
                        .addGroup(ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ButtonPanelLayout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(albumlabel))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ButtonPanelLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(PlayButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PauseButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DownloadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(skipButton)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        ButtonPanelLayout.setVerticalGroup(
            ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(albumlabel)
                .addGap(21, 21, 21)
                .addGroup(ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PlayButton)
                    .addComponent(PauseButton)
                    .addComponent(DownloadButton)
                    .addComponent(skipButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(ButtonPanel, java.awt.BorderLayout.PAGE_END);

        SongInfoArea.setEditable(false);
        jScrollPane1.setViewportView(SongInfoArea);

        javax.swing.GroupLayout SongInfoPanelLayout = new javax.swing.GroupLayout(SongInfoPanel);
        SongInfoPanel.setLayout(SongInfoPanelLayout);
        SongInfoPanelLayout.setHorizontalGroup(
            SongInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        SongInfoPanelLayout.setVerticalGroup(
            SongInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
        );

        getContentPane().add(SongInfoPanel, java.awt.BorderLayout.LINE_END);

        javax.swing.GroupLayout PlaylistPanelLayout = new javax.swing.GroupLayout(PlaylistPanel);
        PlaylistPanel.setLayout(PlaylistPanelLayout);
        PlaylistPanelLayout.setHorizontalGroup(
            PlaylistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PlaylistPanelLayout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addComponent(songlabel)
                .addGap(21, 21, 21))
        );
        PlaylistPanelLayout.setVerticalGroup(
            PlaylistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PlaylistPanelLayout.createSequentialGroup()
                .addGap(0, 193, Short.MAX_VALUE)
                .addComponent(songlabel))
        );

        getContentPane().add(PlaylistPanel, java.awt.BorderLayout.LINE_START);

        artistLabel.setText("             ");

        songLabel.setText("             ");

        albumLabel.setText("             ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(artistlabel)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(artistLabel)
                                .addGap(18, 18, 18)
                                .addComponent(songLabel))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(albumLabel)))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 136, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(artistlabel)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(songLabel)
                        .addComponent(artistLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(albumLabel)
                .addGap(21, 21, 21))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayButtonActionPerformed
        // TODO add your handling code here:
        if (state == PAUSED)
        {
            try {
                sp.pause();
            } catch (InterruptedException ex) {
                Logger.getLogger(TestMuZe.class.getName()).log(Level.SEVERE, null, ex);
            }
            state = PLAYING;
        }
        
    }//GEN-LAST:event_PlayButtonActionPerformed

    private void PauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PauseButtonActionPerformed
        // TODO add your handling code here:
        if (state == PLAYING)
        {
            try {
                sp.pause();
            } catch (InterruptedException ex) {
                Logger.getLogger(TestMuZe.class.getName()).log(Level.SEVERE, null, ex);
            }
            state = PAUSED;
        }
    }//GEN-LAST:event_PauseButtonActionPerformed

    private void jSlider1CaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jSlider1CaretPositionChanged
       
    
    }//GEN-LAST:event_jSlider1CaretPositionChanged

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        try
        {
            sp.setVolume((float)jSlider1.getValue() / 100);
        } catch (JavaLayerException ex)
        {
            Logger.getLogger(TestMuZe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jSlider1StateChanged

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        
        send_RTSP_request("TEARDOWN");
        
    }//GEN-LAST:event_formWindowClosed

    private void skipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipButtonActionPerformed
        
        sp.kill();
        RTSPSeqNb++;
        send_RTSP_request("STOP");
        try
        {
            Thread.sleep(500);            
            /*try
            {
            if (parse_server_response() != 200)
            {
            System.out.println("invalid server response");
            }
            
            
            
            } catch (Exception ex)
            {
            Logger.getLogger(TestMuZe.class.getName()).log(Level.SEVERE, null, ex);
            }
            */
        } catch (InterruptedException ex)
        {
            Logger.getLogger(TestMuZe.class.getName()).log(Level.SEVERE, null, ex);
        }
        
      
    }//GEN-LAST:event_skipButtonActionPerformed

    private void DownloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownloadButtonActionPerformed

        DownloadGUI dlGui = new DownloadGUI();
        dlGui.show();
    }//GEN-LAST:event_DownloadButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {

        try {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
            */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Windows".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(TestMuZe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(TestMuZe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(TestMuZe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(TestMuZe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>
            
            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new TestMuZe().setVisible(true);
                }
            });
            
           
            //TO DO: fill this with the directory returned by FTP client, for now, we'll hardcode in an playlist
            ArrayList<String> playlist = new ArrayList();
            playlist.add("test.mp3");
            playlist.add("testing.mp3");
            playlist.add("test.mp3");
            
            //get server RTSP port and IP address
            //TO DO: get this from a login screen
            int RTSP_server_port = 5544;
            String ServerHost = "localhost";
            InetAddress ServerIPAddr = InetAddress.getByName(ServerHost);
            
            SongFileName = playlist.get(0);         //get the very first song from the playlist to request
            
            Socket RTSPsocket = new Socket(ServerIPAddr, RTSP_server_port);
            RTSPBufferedReader = new BufferedReader(new InputStreamReader(RTSPsocket.getInputStream()) );
            RTSPBufferedWriter = new BufferedWriter(new OutputStreamWriter(RTSPsocket.getOutputStream()) );
            
            
            //init RTSP state:
            state = INIT;
            
            File tempdirectory = new File(DIRECTORY_ARCHIVE_TEMPORARY);
            
            if (!tempdirectory.exists())
            {
                tempdirectory.mkdir();
                tempdirectory = null;
            }
            //fileoutput = new FileOutputStream(DIRECTORY_ARCHIVE_TEMPORARY  + ARCHIVE_MP3_TEMPORARY);
            
            //send setup to the server
            RTPsocket = new DatagramSocket(RTP_RCV_PORT);
            
            //set TimeOut value of the socket to 5msec.
            RTPsocket.setSoTimeout(5);
            
            RTSPSeqNb = 1;
            
            //Send SETUP message to the server
            send_RTSP_request("SETUP");
            
            if (parse_server_response() != 200)
            {
                System.out.println("Invalid Server Response");
                
            }
            else
            {
                //change RTSP state and print new state
                state = READY;
            }
            int i = 0;
            while (true)
            {
                
                if (state == READY) 
                {
          
                    //increase RTSP sequence number
                    RTSPSeqNb = RTSPSeqNb++;
              
              
                    //Send PLAY message to the server
                    send_RTSP_request("PLAY");
              
                    //Wait for the response
                    if (parse_server_response() != 200)
                        System.out.println("Invalid Server Response");
                    else
                    {
                        //read the mp3 tags
                        
                        //String line = RTSPBufferedReader.readLine();
                        //if (line != null)
                            //artistLabel.setText(line);
                        //line = RTSPBufferedReader.readLine();
                        //if(line != null)
                            //songLabel.setText(line);
                        //line = RTSPBufferedReader.readLine();
                        //if(line != null)
                            //albumLabel.setText(line);
                        
                        //change RTSP state and print out new state
                        state=PLAYING;
                  
                        sp = new StreamProcessorHost(RTPsocket);            //creqte new stream processor thread
                        Thread.sleep(200);
                        sp.start();
                        sp.join();                                      //wait for stream to get done playing 
                        System.out.println("Joining back to the main");
                        state = READY;
                 
                    }
                    SongFileName = playlist.get(i % playlist.size());                         //grab the title of the next song in the playlist
                    i++;
                }
                
            }
            
        } catch (Exception ex) {
            Logger.getLogger(TestMuZe.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
  /*
  //Parse Server Response
    waits for an RTSP response from the server, checks for code 200, which is OK
  */
  private static int parse_server_response() throws Exception 
  {
    int reply_code = 0;

    try{
      //parse status line and extract the reply_code:
      String StatusLine = RTSPBufferedReader.readLine();
      //System.out.println("RTSP Client - Received from Server:");
      System.out.println(StatusLine);
    
      StringTokenizer tokens = new StringTokenizer(StatusLine);
      tokens.nextToken(); //skip over the RTSP version
      reply_code = Integer.parseInt(tokens.nextToken());
      
      //if reply code is OK get and print the 2 other lines
      if (reply_code == 200)
        {
          String SeqNumLine = RTSPBufferedReader.readLine();
          System.out.println(SeqNumLine);
          
          String SessionLine = RTSPBufferedReader.readLine();
          System.out.println(SessionLine);
        
          //if state == INIT gets the Session Id from the SessionLine
          tokens = new StringTokenizer(SessionLine);
          tokens.nextToken(); //skip over the Session:
          RTSPid = Integer.parseInt(tokens.nextToken());
        }
      
    }
    catch(Exception ex)
      {
        System.out.println("Exception caught c: "+ex);
        System.exit(0);
      }
    
    return(reply_code);
  }

  /*
    Send RTSP Request
  
    this will send the required RTSP request to the server
  */

  
  
  private static void send_RTSP_request(String request_type)
  {
    try{
      //Use the RTSPBufferedWriter to write to the RTSP socket

      //write the request line:
      RTSPBufferedWriter.write(request_type+" "+SongFileName+" RTSP/1.0"+CRLF);
      System.out.print(request_type+" "+SongFileName+" RTSP/1.0"+CRLF);
      
      //write the CSeq line: 
      RTSPBufferedWriter.write("CSeq "+ RTSPSeqNb +CRLF);
      System.out.print("CSeq "+ RTSPSeqNb +CRLF);
      
      //check if request_type is equal to "SETUP" and in this case write the Transport: line advertising to the server the port used to receive the RTP packets RTP_RCV_PORT
      if(request_type.equals("SETUP"))
      {
          RTSPBufferedWriter.write("Transport: RTP/UDP; client_port= "+ RTP_RCV_PORT + CRLF);
          System.out.print("Transport: RTP/UDP; client_port= "+ RTP_RCV_PORT + CRLF);
      }
      //otherwise, write the Session line from the RTSPid field
      else
      {
          RTSPBufferedWriter.write("Session: "+ RTSPid + CRLF);
          System.out.print("Session: "+ RTSPid + CRLF);
      }
      try
      {
      RTSPBufferedWriter.flush();
      }
      catch(IOException e)
      {
          System.out.println("Exception caught a: "+e.toString());
      }
    }
    catch(Exception ex)
      {
        System.out.println("Exception caught b: "+ex);
        System.exit(0);
      }
  }
  
  
  
  
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ButtonPanel;
    private javax.swing.JButton DownloadButton;
    private javax.swing.JButton PauseButton;
    private javax.swing.JButton PlayButton;
    private javax.swing.JPanel PlaylistPanel;
    private static javax.swing.JTextPane SongInfoArea;
    private javax.swing.JPanel SongInfoPanel;
    private static javax.swing.JLabel albumLabel;
    private javax.swing.JLabel albumlabel;
    private static javax.swing.JLabel artistLabel;
    private javax.swing.JLabel artistlabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JButton skipButton;
    private static javax.swing.JLabel songLabel;
    private javax.swing.JLabel songlabel;
    // End of variables declaration//GEN-END:variables
}
